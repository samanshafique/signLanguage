import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:saeed_s_application3/core/utils/pref_utils.dart';
import 'package:saeed_s_application3/core/utils/size_utils.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onError,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.lightBlueA700,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary.withOpacity(1),
            width: 2.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return appTheme.green700;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return appTheme.green700;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: appTheme.lightBlueA700,
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.blueGray100,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: colorScheme.primary.withOpacity(1),
          fontSize: 16.fSize,
          fontFamily: 'DM Sans',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray40003,
          fontSize: 14.fSize,
          fontFamily: 'DM Sans',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.primary.withOpacity(1),
          fontSize: 10.fSize,
          fontFamily: 'Mulish',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: appTheme.green700,
          fontSize: 40.fSize,
          fontFamily: 'Dubai',
          fontWeight: FontWeight.w700,
        ),
        displaySmall: TextStyle(
          color: appTheme.indigo900,
          fontSize: 36.fSize,
          fontFamily: 'DM Sans',
          fontWeight: FontWeight.w700,
        ),
        headlineLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 30.fSize,
          fontFamily: 'Dubai',
          fontWeight: FontWeight.w700,
        ),
        headlineMedium: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 26.fSize,
          fontFamily: 'Dubai',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: appTheme.lightBlueA70001,
          fontSize: 24.fSize,
          fontFamily: 'Dubai',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: colorScheme.primary.withOpacity(1),
          fontSize: 12.fSize,
          fontFamily: 'Dubai',
          fontWeight: FontWeight.w700,
        ),
        labelSmall: TextStyle(
          color: appTheme.indigo200,
          fontSize: 8.fSize,
          fontFamily: 'Dubai',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 20.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray60002,
          fontSize: 16.fSize,
          fontFamily: 'Dubai',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: Color(0XFF000000),
          fontSize: 14.fSize,
          fontFamily: 'DM Sans',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0X3F000000),
    primaryContainer: Color(0XFF12121D),
    secondaryContainer: Color(0XFF096A2F),

    // Error colors
    errorContainer: Color(0XFF5DB849),
    onError: Color(0XFFF3F3F3),

    // On colors(text colors)
    onPrimary: Color(0XFFBD0034),
    onPrimaryContainer: Color(0XFF529744),
    onSecondaryContainer: Color(0XFF111112),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Blue
  Color get blue300 => Color(0XFF70B0F7);
  Color get blue50 => Color(0XFFE5F1FF);
  Color get blue700 => Color(0XFF046ADB);
  Color get blue70001 => Color(0XFF036DE1);
  Color get blue800 => Color(0XFF005BC0);

  // BlueGray
  Color get blueGray100 => Color(0XFFD3D3D3);
  Color get blueGray10001 => Color(0XFFD9D9D9);
  Color get blueGray10002 => Color(0XFFD3D3D2);
  Color get blueGray50 => Color(0XFFF1F1F1);

  // Gray
  Color get gray200 => Color(0XFFF3F0F0);
  Color get gray20001 => Color(0XFFE9E7E7);
  Color get gray20002 => Color(0XFFEAEAEA);
  Color get gray300 => Color(0XFFE6E6E6);
  Color get gray30001 => Color(0XFFE8E4E4);
  Color get gray400 => Color(0XFFB6B2B2);
  Color get gray40001 => Color(0XFFB4B5B7);
  Color get gray40002 => Color(0XFFC6C5C5);
  Color get gray40003 => Color(0XFFC6C6C6);
  Color get gray50 => Color(0XFFF8F8F8);
  Color get gray600 => Color(0XFF7B7C7E);
  Color get gray60001 => Color(0XFF6F6F6F);
  Color get gray60002 => Color(0XFF80807F);
  Color get gray900 => Color(0XFF121212);

  // Green
  Color get green400 => Color(0XFF7EB073);
  Color get green700 => Color(0XFF479037);

  // Indigo
  Color get indigo200 => Color(0XFF9DB2CE);
  Color get indigo900 => Color(0XFF2B3674);

  // LightBlue
  Color get lightBlueA700 => Color(0XFF007AFF);
  Color get lightBlueA70001 => Color(0XFF0073F1);

  // LightGreen
  Color get lightGreen500 => Color(0XFF85D050);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
